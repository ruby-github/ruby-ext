#!/opt/ruby/bin/ruby

require 'ruby-ext'
require 'optparse'

$settings[:colorize] = true

options = {}

option_parser = OptionParser.new do |opt|
  opt.banner = [
    'Usage:',
    '  auto_system [options]',
    '',
    '  options:'
  ].join "\n"

  opt.on('-n name', '--name name', 'ethernet name') do |value|
    options[:name] = value
  end

  opt.on('-i ipaddress', '--ip ipaddress', 'set system ip address') do |value|
    options[:ip] = value
  end

  opt.on('-m mask', '--mask mask', 'set system ip netmask') do |value|
    options[:mask] = value
  end

  opt.on('-g gateway', '--gateway gateway', 'set system ip gateway') do |value|
    options[:gateway] = value
  end

  opt.on('-h hostname', '--hostname hostname', 'set system hostname') do |value|
    options[:hostname] = value
  end
end

status = true
logger = Logger.new
logger.level = Logger::DEBUG

begin
  option_parser.parse!

  if options.empty?
    case OS.name
    when :windows
      drb = false
      jenkins = false

      OS.processes.each do |pid, info|
        if info[:command_line].include? 'drb'
          drb = true

          next
        end

        if info[:command_line].include? 'slave-agent.jnlp'
          jenkins = true

          next
        end
      end

      services = []

      if 0 != cmdline2e('sc query state= all', logger) do |line, stdin, wait_thr|
          if line.strip =~ /^SERVICE_NAME\s*:\s*(.*)$/i
            services << $1
          end
        end

        services = []
      end

      if not services.empty?
        services.each do |name|
          case name
          when 'drb'
            if not drb
              cmdline2e('sc query %s' % name, logger) do |line, stdin, wait_thr|
                if line.strip =~ /^STATE\s*:\s*(\d+)\s+(\w+)$/i
                  if ['STOPPED'].include? $2.upcase
                    system 'start drb'
                  end
                end
              end
            end
          when 'jenkins'
            if not jenkins
              cmdline2e('sc query %s' % name, logger) do |line, stdin, wait_thr|
                if line.strip =~ /^STATE\s*:\s*(\d+)\s+(\w+)$/i
                  if ['STOPPED'].include? $2.upcase
                    if not ENV['JENKINS_HOME'].nil? and File.file? File.join(ENV['JENKINS_HOME'], 'slave-agent.jnlp')
                      cmdline2e 'start javaws -silent %s' % File.cmdline(File.join(ENV['JENKINS_HOME'], 'slave-agent.jnlp')), logger
                    end
                  end
                end
              end
            end
          else
          end
        end
      end
    when :linux
      map = {}

      cmdline2e('ifconfig', logger) do |line, stdin, wait_thr|
        if line.strip =~ /link\s+encap\s*:\s*ethernet\s+hwaddr\s+([0-9a-f:]+)$/i
          map[$`.strip] = $1
        end
      end

      eth0 = map['eth0']

      cmdline2e('ifconfig -a', logger) do |line, stdin, wait_thr|
        if line.strip =~ /link\s+encap\s*:\s*ethernet\s+hwaddr\s+([0-9a-f:]+)$/i
          eth_name = $`.strip

          if map.has_key? eth_name
            map.delete eth_name
          else
            map[eth_name] = $1
          end
        end
      end

      if not map.empty? and not map.has_key? 'eth0'
        rule_file = '/etc/udev/rules.d/70-persistent-net.rules'
        eth0_file = '/etc/sysconfig/network-scripts/ifcfg-eth0'

        if File.file? rule_file
          File.delete rule_file, logger
        end

        if File.file? eth0_file
          map['eth0'] = map[map.keys.sort.first]

          lines = []

          IO.readlines(eth0_file).each do |line|
            line.rstrip!

            if line =~ /^\s*HWADDR\s*=\s*/i
              line = 'HWADDR=%s' % map['eth0']
            end

            lines << line
          end

          File.open eth0_file, 'w' do |f|
            f.puts lines
          end
        end
      end
    else
    end
  else
    case OS.name
    when :windows
      name = options[:name] || '本地连接'

      if not options[:hostname].nil?
        system 'wmic computersystem where name="%s" call rename "%s"' % [ENV['computername'], options[:hostname]]
      end

      if not options[:ip].nil? and not options[:mask].nil? and not options[:gateway].nil?
        if OS.os_info[:version].to_s >= '6'
          # win 2008
          cmdline2e 'netsh interface ip set address "%s" static %s %s %s' % [name, options[:ip], options[:mask], options[:gateway]], logger
        else
          # win 2003
          cmdline2e 'netsh interface ip set address "%s" gateway=%s gwmetric=0' % [name, options[:gateway]], logger
          cmdline2e 'netsh interface ip set address "%s" static addr=%s mask=%s' % [name, options[:ip], options[:mask]], logger
        end
      end

      if not options[:hostname].nil?
        cmdline2e 'shutdown /f /r /t 10', logger
      end
    when :linux
      name = options[:name] || 'eth0'

      if not options[:hostname].nil? or not options[:ip].nil? or not options[:mask].nil? or not options[:gateway].nil?
        eth_file = '/etc/sysconfig/network-scripts/ifcfg-%s' % name
        hostname_file = '/etc/sysconfig/network'
        host_file = '/etc/hosts'

        ip = nil
        hostname = nil

        if File.file? eth_file
          map = {}

          IO.readlines(eth_file).each do |line|
            line.rstrip!

            if line =~ /=/
              map[$`.strip.upcase] = $'.strip
            end
          end

          if not options[:ip].nil? or not options[:mask].nil? or not options[:gateway].nil?
            map['BOOTPROTO'] = 'static'
            map['ONBOOT'] = 'yes'

            if not options[:ip].nil?
              map['IPADDR'] = options[:ip]
            end

            if not options[:mask].nil?
              map['NETMASK'] = options[:mask]
            end

            if not options[:gateway].nil?
              map['GATEWAY'] = options[:gateway]
            end

            File.open eth_file, 'w' do |f|
              map.each do |k, v|
                f.puts '%s=%s' % [k, v]
              end
            end
          end

          ip = map['IPADDR']
        end

        if File.file? hostname_file
          map = {}

          IO.readlines(hostname_file).each do |line|
            line.rstrip!

            if line =~ /=/
              map[$`.strip.upcase] = $'.strip
            end
          end

          if not options[:hostname].nil?
            map['NETWORKING'] = 'yes'
            map['HOSTNAME'] = options[:hostname]

            File.open hostname_file, 'w' do |f|
              map.each do |k, v|
                f.puts '%s=%s' % [k, v]
              end
            end
          end

          hostname = map['HOSTNAME']
        end

        if File.file? host_file and not ip.nil? and not hostname.nil?
          File.open host_file, 'w' do |f|
            f.puts [ip, hostname, 'localhost.localdomain', 'localhost'].join("\t")
            f.puts ['127.0.0.1', hostname, 'localhost.localdomain', 'localhost'].join("\t")
            f.puts ['::1', hostname, 'localhost.localdomain6', 'localhost6'].join("\t")
          end
        end

        oracle_listener = '/opt/oracle/product/11.2.0/db_1/network/admin/listener.ora'
        oracle_tnsnames = '/opt/oracle/product/11.2.0/db_1/network/admin/tnsnames.ora'

        if File.file? oracle_listener
          if not options[:hostname].nil?
            lines = []

            IO.readlines(oracle_listener).each do |line|
              line.rstrip!

              if line =~ /\(HOST\s*=\s*[\d\w-]+\)/
                line = '%s(HOST = %s)%s' % [$`, options[:hostname], $']
              end

              lines << line
            end

            File.open oracle_listener, 'w' do |f|
              f.puts lines
            end
          end
        end

        if File.file? oracle_tnsnames
          if not options[:hostname].nil? or not options[:ip].nil?
            lines = []

            IO.readlines(oracle_tnsnames).each do |line|
              line.rstrip!

              if line.strip =~ /^UEP_[\d.]+\s*=$/
                if not options[:ip].nil?
                  line = 'UEP_%s =' % options[:ip]
                end
              end

              if line =~ /\(HOST\s*=\s*[\d\w-]+\)/
                if not options[:hostname].nil?
                  line = '%s(HOST = %s)%s' % [$`, options[:hostname], $']
                end
              end

              lines << line
            end

            File.open oracle_tnsnames, 'w' do |f|
              f.puts lines
            end
          end
        end
      end

      if not options[:hostname].nil?
        cmdline2e 'reboot', logger
      else
        cmdline2e 'service network restart', logger
      end
    else
    end
  end
rescue
  logger.exception $!

  logger << "<font color:red;highlight>Unknown command</font>\n"
  logger << "%s\n" % option_parser.help

  status = false
end

status.exit